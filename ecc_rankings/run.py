# ecc_rankings/run.py
import os, sys, traceback

# --- import shim so it works as module or script ---
if __package__ in (None, "",):
    sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    from ecc_rankings.config import OUTPUT_DIR as OUTPUT_DIR_CFG, SEASON, CLUB_NAME
    from ecc_rankings.bowling import BowlingScraper
    from ecc_rankings.batting import BattingScraper
    from ecc_rankings.all_rounder import AllRounderLeaderboard  # adjust name if your file is allrounder.py
else:
    from .config import OUTPUT_DIR as OUTPUT_DIR_CFG, SEASON, CLUB_NAME
    from .bowling import BowlingScraper
    from .batting import BattingScraper
    from .all_rounder import AllRounderLeaderboard

def _abs_docs_dir():
    # Put docs alongside the package directory, not wherever you launched Python
    pkg_dir = os.path.dirname(__file__)                 # .../ecc_rankings
    root_dir = os.path.dirname(pkg_dir)                 # repo root
    out = os.environ.get("ECC_OUTPUT_DIR", OUTPUT_DIR_CFG or "docs")
    return out if os.path.isabs(out) else os.path.join(root_dir, out)

def _write(path: str, content: str):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"‚úî Wrote {path} ({os.path.getsize(path)} bytes)")

def main():
    docs_dir = _abs_docs_dir()
    print(f"[ecc] CWD: {os.getcwd()}")
    print(f"[ecc] Repo docs dir: {docs_dir}")
    os.makedirs(docs_dir, exist_ok=True)

    bowling_out = os.path.join(docs_dir, f"kncb_bowling_stats_{SEASON}.html")
    batting_out = os.path.join(docs_dir, f"kncb_batting_stats_{SEASON}.html")
    allr_out    = os.path.join(docs_dir, f"kncb_allrounder_stats_{SEASON}.html")

    try:
        bowling = BowlingScraper(html_path=bowling_out)
        batting = BattingScraper(html_path=batting_out)

        # --- Scrape ---
        df_bowling = bowling.scrape()
        df_batting = batting.scrape()
        print(f"[ecc] Bowling rows: {df_bowling.shape}")
        print(f"[ecc] Batting rows: {df_batting.shape}")

        # --- Pages ---
        _write(bowling_out, bowling.generate_html(df_bowling))
        _write(batting_out, batting.generate_html(df_batting))

        # --- All-rounder: merged batting + scored bowling ---
        df_bat_merged  = batting.combine_and_score(df_batting)
        df_bowl_scored = bowling.calculate_icc_points(df_bowling)
        print(f"[ecc] Merged batting rows (unique players): {df_bat_merged.shape}")

        allr = AllRounderLeaderboard(season=SEASON, club=CLUB_NAME, html_path=allr_out)
        df_allr = allr.compute(df_bat_merged, df_bowl_scored)
        _write(allr_out, allr.generate_html(df_allr))

        # --- index.html ---
        index_html = f"""<!doctype html>
                    <html><head>
                      <meta charset="utf-8" />
                      <title>ECC Rankings {SEASON}</title>
                      <style>body{{font-family:system-ui;margin:24px}}a{{display:block;margin:.5rem 0}}</style>
                    </head><body>
                      <h1>ECC Rankings {SEASON}</h1>
                      <a href="kncb_batting_stats_{SEASON}.html">Batting Leaderboard</a>
                      <a href="kncb_bowling_stats_{SEASON}.html">Bowling Leaderboard</a>
                      <a href="kncb_allrounder_stats_{SEASON}.html">All-Rounder Leaderboard</a>
                      <p style="color:#666">Generated by ecc_rankings.</p>
                    </body></html>
                """
        _write(os.path.join(docs_dir, "index.html"), index_html)

        print("\nAll done üéâ Open this folder in Explorer:")
        print(docs_dir)

    except Exception:
        print("‚ùå Run failed with exception:\n")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
